import java.util.Arrays;
public class Sortnumbers {

	static void rearrange(int[] arr, int n)
	{
		int temp[] = arr.clone();
		int small = 0, large = n - 1;
		boolean flag = true;
		for (int i = 0; i < n; i++) {
			if (flag)
				arr[i] = temp[large--];
			else
				arr[i] = temp[small++];
			flag = !flag;
		}
	}
	public static void main(String[] args)
	{
		int arr[] = new int[] { 2, 4, 6, 8, 10 };
		rearrange(arr, arr.length);
		System.out.print("Expected output : ");
		System.out.println(Arrays.toString(arr));
	}

}

URL that contains the solution in programming language of your choice (recommended: Typescript or JavaScript) : 

Time complexity (Big O notation) of your solution : O(N), Iterating over the array of size N 2 times.

Space complexity (Big O notation) of your solution :  O(N), since N extra space has been taken.

List all possible test cases : Work on every number either it is positive or negative, it is 1 digit or more than that, not working on decimal number
